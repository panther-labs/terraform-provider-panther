// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_role

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func RoleResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the role",
				MarkdownDescription: "ID of the role",
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"log_type_access": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The log types that the role can or cannot access, according to the `logTypeAccessKind` field. This field should be omitted if `logTypeAccessKind` has a value of `ALLOW_ALL` or `DENY_ALL`",
				MarkdownDescription: "The log types that the role can or cannot access, according to the `logTypeAccessKind` field. This field should be omitted if `logTypeAccessKind` has a value of `ALLOW_ALL` or `DENY_ALL`",
			},
			"log_type_access_kind": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Defines the role's access to log types. This field is required and has effect only if the datalake RBAC feature is enabled.",
				MarkdownDescription: "Defines the role's access to log types. This field is required and has effect only if the datalake RBAC feature is enabled.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ALLOW",
						"ALLOW_ALL",
						"DENY",
						"DENY_ALL",
					),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the role",
				MarkdownDescription: "The name of the role",
			},
			"permissions": schema.ListAttribute{
				ElementType: types.StringType,
				Required:    true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type RoleModel struct {
	ID                types.String `tfsdk:"id"`
	CreatedAt         types.String `tfsdk:"created_at"`
	LogTypeAccess     types.List   `tfsdk:"log_type_access"`
	LogTypeAccessKind types.String `tfsdk:"log_type_access_kind"`
	Name              types.String `tfsdk:"name"`
	Permissions       types.List   `tfsdk:"permissions"`
	UpdatedAt         types.String `tfsdk:"updated_at"`
}
