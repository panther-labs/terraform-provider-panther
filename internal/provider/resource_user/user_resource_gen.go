// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_user

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the user",
				MarkdownDescription: "ID of the user",
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"email": schema.StringAttribute{
				Required:            true,
				Description:         "The email address of the user",
				MarkdownDescription: "The email address of the user",
			},
			"enabled": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether the user is active or deactivated",
				MarkdownDescription: "Whether the user is active or deactivated",
			},
			"family_name": schema.StringAttribute{
				Required:            true,
				Description:         "The family/last name of the user",
				MarkdownDescription: "The family/last name of the user",
			},
			"given_name": schema.StringAttribute{
				Required:            true,
				Description:         "The given/first name of the user",
				MarkdownDescription: "The given/first name of the user",
			},
			"last_logged_in_at": schema.StringAttribute{
				Computed: true,
			},
			"role": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The id of the role. Note: id should be excluded if name is provided during a modify operation",
						MarkdownDescription: "The id of the role. Note: id should be excluded if name is provided during a modify operation",
					},
					"name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The name of the role. Note: name should be excluded if id is provided during a modify operation",
						MarkdownDescription: "The name of the role. Note: name should be excluded if id is provided during a modify operation",
					},
				},
				CustomType: RoleType{
					ObjectType: types.ObjectType{
						AttrTypes: RoleValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The Cognito auth-related status of this User",
				MarkdownDescription: "The Cognito auth-related status of this User",
			},
		},
	}
}

type UserModel struct {
	ID             types.String `tfsdk:"id"`
	CreatedAt      types.String `tfsdk:"created_at"`
	Email          types.String `tfsdk:"email"`
	Enabled        types.Bool   `tfsdk:"enabled"`
	FamilyName     types.String `tfsdk:"family_name"`
	GivenName      types.String `tfsdk:"given_name"`
	LastLoggedInAt types.String `tfsdk:"last_logged_in_at"`
	Role           RoleValue    `tfsdk:"role"`
	Status         types.String `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = RoleType{}

type RoleType struct {
	basetypes.ObjectType
}

func (t RoleType) Equal(o attr.Type) bool {
	other, ok := o.(RoleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RoleType) String() string {
	return "RoleType"
}

func (t RoleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RoleValue{
		ID:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewRoleValueNull() RoleValue {
	return RoleValue{
		state: attr.ValueStateNull,
	}
}

func NewRoleValueUnknown() RoleValue {
	return RoleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRoleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RoleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RoleValue Attribute Value",
				"While creating a RoleValue value, a missing attribute value was detected. "+
					"A RoleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RoleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RoleValue Attribute Type",
				"While creating a RoleValue value, an invalid attribute value was detected. "+
					"A RoleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RoleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RoleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RoleValue Attribute Value",
				"While creating a RoleValue value, an extra attribute value was detected. "+
					"A RoleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RoleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRoleValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewRoleValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRoleValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewRoleValueUnknown(), diags
	}

	return RoleValue{
		ID:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewRoleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RoleValue {
	object, diags := NewRoleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRoleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RoleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRoleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRoleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRoleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRoleValueMust(RoleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RoleType) ValueType(ctx context.Context) attr.Value {
	return RoleValue{}
}

var _ basetypes.ObjectValuable = RoleValue{}

type RoleValue struct {
	ID    basetypes.StringValue `tfsdk:"id"`
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v RoleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.ID.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RoleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RoleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RoleValue) String() string {
	return "RoleValue"
}

func (v RoleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.ID,
			"name": v.Name,
		})

	return objVal, diags
}

func (v RoleValue) Equal(o attr.Value) bool {
	other, ok := o.(RoleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ID.Equal(other.ID) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v RoleValue) Type(ctx context.Context) attr.Type {
	return RoleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RoleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
	}
}
