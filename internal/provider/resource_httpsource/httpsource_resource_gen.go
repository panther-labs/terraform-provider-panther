// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_httpsource

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func HttpsourceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auth_bearer_token": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication bearer token value of the http source. Used for Bearer auth method",
				MarkdownDescription: "The authentication bearer token value of the http source. Used for Bearer auth method",
			},
			"auth_header_key": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication header key of the http source. Used for HMAC and SharedSecret auth methods",
				MarkdownDescription: "The authentication header key of the http source. Used for HMAC and SharedSecret auth methods",
			},
			"auth_hmac_alg": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication algorithm of the http source. Used for HMAC auth method",
				MarkdownDescription: "The authentication algorithm of the http source. Used for HMAC auth method",
			},
			"auth_method": schema.StringAttribute{
				Required:            true,
				Description:         "The authentication method of the http source",
				MarkdownDescription: "The authentication method of the http source",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"SharedSecret",
						"HMAC",
						"Bearer",
						"Basic",
						"None",
					),
				},
			},
			"auth_password": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication header password of the http source. Used for Basic auth method",
				MarkdownDescription: "The authentication header password of the http source. Used for Basic auth method",
			},
			"auth_secret_value": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication header secret value of the http source. Used for HMAC and SharedSecret auth methods",
				MarkdownDescription: "The authentication header secret value of the http source. Used for HMAC and SharedSecret auth methods",
			},
			"auth_username": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication header username of the http source. Used for Basic auth method",
				MarkdownDescription: "The authentication header username of the http source. Used for Basic auth method",
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "ID of the http source to fetch",
				MarkdownDescription: "ID of the http source to fetch",
			},
			"integration_label": schema.StringAttribute{
				Required:            true,
				Description:         "The integration label (name)",
				MarkdownDescription: "The integration label (name)",
			},
			"log_stream_type": schema.StringAttribute{
				Required:            true,
				Description:         "The log stream type",
				MarkdownDescription: "The log stream type",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"Auto",
						"CloudWatchLogs",
						"JSON",
						"JsonArray",
						"Lines",
					),
				},
			},
			"log_stream_type_options": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"json_array_envelope_field": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Path to the array value to extract elements from, only applicable if logStreamType is JsonArray. Leave empty if the input JSON is an array itself",
						MarkdownDescription: "Path to the array value to extract elements from, only applicable if logStreamType is JsonArray. Leave empty if the input JSON is an array itself",
					},
				},
				CustomType: LogStreamTypeOptionsType{
					ObjectType: types.ObjectType{
						AttrTypes: LogStreamTypeOptionsValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"log_types": schema.ListAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "The log types of the integration",
				MarkdownDescription: "The log types of the integration",
			},
		},
	}
}

type HttpsourceModel struct {
	AuthBearerToken      types.String              `tfsdk:"auth_bearer_token"`
	AuthHeaderKey        types.String              `tfsdk:"auth_header_key"`
	AuthHmacAlg          types.String              `tfsdk:"auth_hmac_alg"`
	AuthMethod           types.String              `tfsdk:"auth_method"`
	AuthPassword         types.String              `tfsdk:"auth_password"`
	AuthSecretValue      types.String              `tfsdk:"auth_secret_value"`
	AuthUsername         types.String              `tfsdk:"auth_username"`
	Id                   types.String              `tfsdk:"id"`
	IntegrationLabel     types.String              `tfsdk:"integration_label"`
	LogStreamType        types.String              `tfsdk:"log_stream_type"`
	LogStreamTypeOptions LogStreamTypeOptionsValue `tfsdk:"log_stream_type_options"`
	LogTypes             types.List                `tfsdk:"log_types"`
}

var _ basetypes.ObjectTypable = LogStreamTypeOptionsType{}

type LogStreamTypeOptionsType struct {
	basetypes.ObjectType
}

func (t LogStreamTypeOptionsType) Equal(o attr.Type) bool {
	other, ok := o.(LogStreamTypeOptionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LogStreamTypeOptionsType) String() string {
	return "LogStreamTypeOptionsType"
}

func (t LogStreamTypeOptionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	jsonArrayEnvelopeFieldAttribute, ok := attributes["json_array_envelope_field"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`json_array_envelope_field is missing from object`)

		return nil, diags
	}

	jsonArrayEnvelopeFieldVal, ok := jsonArrayEnvelopeFieldAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`json_array_envelope_field expected to be basetypes.StringValue, was: %T`, jsonArrayEnvelopeFieldAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LogStreamTypeOptionsValue{
		JsonArrayEnvelopeField: jsonArrayEnvelopeFieldVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewLogStreamTypeOptionsValueNull() LogStreamTypeOptionsValue {
	return LogStreamTypeOptionsValue{
		state: attr.ValueStateNull,
	}
}

func NewLogStreamTypeOptionsValueUnknown() LogStreamTypeOptionsValue {
	return LogStreamTypeOptionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLogStreamTypeOptionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LogStreamTypeOptionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LogStreamTypeOptionsValue Attribute Value",
				"While creating a LogStreamTypeOptionsValue value, a missing attribute value was detected. "+
					"A LogStreamTypeOptionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LogStreamTypeOptionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LogStreamTypeOptionsValue Attribute Type",
				"While creating a LogStreamTypeOptionsValue value, an invalid attribute value was detected. "+
					"A LogStreamTypeOptionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LogStreamTypeOptionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LogStreamTypeOptionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LogStreamTypeOptionsValue Attribute Value",
				"While creating a LogStreamTypeOptionsValue value, an extra attribute value was detected. "+
					"A LogStreamTypeOptionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LogStreamTypeOptionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLogStreamTypeOptionsValueUnknown(), diags
	}

	jsonArrayEnvelopeFieldAttribute, ok := attributes["json_array_envelope_field"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`json_array_envelope_field is missing from object`)

		return NewLogStreamTypeOptionsValueUnknown(), diags
	}

	jsonArrayEnvelopeFieldVal, ok := jsonArrayEnvelopeFieldAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`json_array_envelope_field expected to be basetypes.StringValue, was: %T`, jsonArrayEnvelopeFieldAttribute))
	}

	if diags.HasError() {
		return NewLogStreamTypeOptionsValueUnknown(), diags
	}

	return LogStreamTypeOptionsValue{
		JsonArrayEnvelopeField: jsonArrayEnvelopeFieldVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewLogStreamTypeOptionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LogStreamTypeOptionsValue {
	object, diags := NewLogStreamTypeOptionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLogStreamTypeOptionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LogStreamTypeOptionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLogStreamTypeOptionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLogStreamTypeOptionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLogStreamTypeOptionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLogStreamTypeOptionsValueMust(LogStreamTypeOptionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LogStreamTypeOptionsType) ValueType(ctx context.Context) attr.Value {
	return LogStreamTypeOptionsValue{}
}

var _ basetypes.ObjectValuable = LogStreamTypeOptionsValue{}

type LogStreamTypeOptionsValue struct {
	JsonArrayEnvelopeField basetypes.StringValue `tfsdk:"json_array_envelope_field"`
	state                  attr.ValueState
}

func (v LogStreamTypeOptionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["json_array_envelope_field"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.JsonArrayEnvelopeField.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["json_array_envelope_field"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LogStreamTypeOptionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LogStreamTypeOptionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LogStreamTypeOptionsValue) String() string {
	return "LogStreamTypeOptionsValue"
}

func (v LogStreamTypeOptionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"json_array_envelope_field": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"json_array_envelope_field": v.JsonArrayEnvelopeField,
		})

	return objVal, diags
}

func (v LogStreamTypeOptionsValue) Equal(o attr.Value) bool {
	other, ok := o.(LogStreamTypeOptionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.JsonArrayEnvelopeField.Equal(other.JsonArrayEnvelopeField) {
		return false
	}

	return true
}

func (v LogStreamTypeOptionsValue) Type(ctx context.Context) attr.Type {
	return LogStreamTypeOptionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LogStreamTypeOptionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"json_array_envelope_field": basetypes.StringType{},
	}
}
